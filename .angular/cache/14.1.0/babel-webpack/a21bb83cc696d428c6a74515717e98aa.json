{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { catchError, map, switchMap, withLatestFrom } from 'rxjs/operators';\nimport { select } from '@ngrx/store';\nimport { Effect, ofType } from '@ngrx/effects';\nimport * as fromEvent from './index';\nimport * as eventAction from './event.action';\nimport { of } from 'rxjs/internal/observable/of';\nimport { empty } from 'rxjs/internal/observable/empty';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/apicall.service\";\nimport * as i2 from \"@ngrx/effects\";\nimport * as i3 from \"@ngrx/store\";\nexport class EventEffect {\n  constructor(apiCallService, action$, store) {\n    this.apiCallService = apiCallService;\n    this.action$ = action$;\n    this.store = store;\n    this.loadProduct$ = this.action$.pipe(ofType(eventAction.EventActionTypes.Load), withLatestFrom(this.store.pipe(select(fromEvent.getLoaded))), switchMap(([, loaded]) => {\n      if (loaded) {\n        return empty();\n      }\n\n      return this.apiCallService.getEvents().pipe(map(events => {\n        return new eventAction.LoadSuccess(events);\n      }), catchError(err => of(new eventAction.LoadFail(err))));\n    }));\n  }\n\n}\n\nEventEffect.ɵfac = function EventEffect_Factory(t) {\n  return new (t || EventEffect)(i0.ɵɵinject(i1.ApicallService), i0.ɵɵinject(i2.Actions), i0.ɵɵinject(i3.Store));\n};\n\nEventEffect.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EventEffect,\n  factory: EventEffect.ɵfac\n});\n\n__decorate([Effect()], EventEffect.prototype, \"loadProduct$\", void 0);","map":null,"metadata":{},"sourceType":"module"}