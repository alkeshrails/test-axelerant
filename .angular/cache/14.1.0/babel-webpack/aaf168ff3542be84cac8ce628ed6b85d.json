{"ast":null,"code":"import { catchError, map, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ApicallService = /*#__PURE__*/(() => {\n  class ApicallService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    getResponse() {\n      return this.http.get(\"assets/Event.json\");\n    }\n\n    getEvents() {\n      return this.http.get('assets/Event.json').pipe(map(data => {\n        return data;\n      }), //   tap(data => console.log(JSON.stringify(data))),\n      catchError(this.handleError));\n    }\n\n    handleError(err) {\n      // in a real world app, we may send the server to some remote logging infrastructure\n      // instead of just logging it to the console\n      let errorMessage;\n\n      if (err.error instanceof ErrorEvent) {\n        // A client-side or network error occurred. Handle it accordingly.\n        errorMessage = `An error occurred: ${err.error.message}`;\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong,\n        errorMessage = `Backend returned code ${err.status}: ${err.body.error}`;\n      }\n\n      console.error(err);\n      return throwError(errorMessage);\n    }\n\n  }\n\n  ApicallService.ɵfac = function ApicallService_Factory(t) {\n    return new (t || ApicallService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ApicallService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApicallService,\n    factory: ApicallService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApicallService;\n})();","map":null,"metadata":{},"sourceType":"module"}